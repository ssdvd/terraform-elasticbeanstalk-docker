Permissionamento:

Tipos de permissionamento:

Completo:
Todas as permissoes possiveis;
Sempre funciona
Mais Simples
Menos seguro
Nao recomendado

esse tipo contem todas as permissoes possiveis, sempre ira funcionar e nunca
retornara erro de permissoes, bem mais simples de fazer, muito menos seguro
se por acaso tiveram acessa a app e de maneira maliciosa, o invasor podera ter 
acesso tudo que o app tiver permissao e por isso nao e recomendado.

Aditivo:
Apenas as permissoes necessarias
Nem sempre funciona da primeira vez
Mais complexo
Mais seguro
Recomendado

esse tipo contem somente as permissoes necessarias, geralmente retorna erro de 
permissoes insuficientes, mas e facil solucionar e por conta disso e mais complexo
devido permissionar cada item especificamente com a funcao do app tornando tambem
bem mais seguro e e por isso que e recomendado.

e como boa pratica iremos utilizar o tipo aditivo, onde no nosso caso iremos 
ter que disponibilizar ao elasticbeanstalk alguns tipos especifico de permissoes
para acesso alguns servicos, exemplo teremos que liberar o elasticbeanstalk para 
poder ler e obter as imagens docker do repo ECR para poder provisionar as instancias
EC2 com a imagem, dito isso tbm permitir a criacao de instancias EC2, o S3 para 
poder armazenar informacoes temporarias e tambem permissoes de gravar metricas no
cloudwatch. e com base nisso devemos criar uma role no IAM para permissionar tudo
corretamente.

Criando uma role:

Iremos criar um arquivo chamado role.tf dentro da pasta infra, com o seguinte
bloco de cod:

resource "aws_iam_role" "beanstalk_ec2" {
  name = "beanstalk-ec2-role"

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })
}

esse cod indica que iremos criar uma role no iam com o nome beanstalk_ec2,
com o name beanstalk-ec2-role, e com o assume_role_policy = jsonencode iremos
criar um arquivo formatado em json junto com as permissoes que citamos anteriormente
o codigo acima, somente esta com a permissao do ec2 e logo em seguida iremos complementar
com as permissoes restantes.

e para isso devemos criar as politicas da role, com o seguinte bloco de cod:

resource "aws_iam_role_policy" "beanstalk_ec2_policy" {
  name = "beanstalk-ec2-policy"
  role = aws_iam_role.beanstalk_ec2.id

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "cloudwatch:PutMetricData", | INSERIR METRICAS, %CPU, %MEMORY ETC
          "ds:CreateComputer", | CRIAR INSTANCIAS
          "ds:DescribeDirectories", | ALTERAR RECURSOS DENTRO DAS INSTANCIAS
          "ec2:DescriveInstanceStatus", | VERIFICAR STATUS DAS INSTANCIAS 
          "logs:*", | GUARDAR LOGS DO APP
          "ssm:*", | MODIFICAR AS INSTANCIAS E IMAGENS DO EC2
          "ec2messages:*", | PARA AS INSTANCIAS SE ENXERGAREM 
          "ecr:GetAuthorizationToken", | AUTORIZACAO DO TOKEN 
          "ecr:BatchCheckLayerAvailability", | CAMADAS DAS IMAGENS 
          "ecr:GetDownloadUrlForLayer", | RETORNA LINK DO S3 DAS CAMADAS 
          "ecr:GetRepositoryPolicy", | RETORNA AS PERMISSOES DO REPO DESEJADO
          "ecr:DescribeRepositories", | INFO DO REPO 
          "ecr:ListImages", | LISTA COM AS IMAGENS DO REPO 
          "ecr:DescribeImages", | INFO DE METADADOS DAS IMAGENS 
          "ecr:BatchGetImage", | IMPORTAR NOSSAS IMAGENS 
          "s3:*" | CRIAR, APAGAR E EDITAR BUCKETS 
        ]
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}

Para um melhor entendimento:

cloudwatch:PutMetricData - Usado para colocar informações de métrica no cloudwatch, 
uma vez que as informações que são enviadas não podem ser editadas.

ds:CreateComputer - Cria um objeto com a descrição de uma máquina dentro de um 
diretório especificado.

ds:DescribeDirectories - Obtém informações sobre os diretórios que pertencem à 
conta. É possível obter informações de diretórios específicos, ou de todos os 
diretórios.

ec2:DescribeInstanceStatus - Pode verificar o status de uma instância especificada 
ou de todas as instâncias disponiveis. Os status são a zona de disponibilidade, 
eventos programados, ID da instância, o estado da instância em si (precisa estar 
em running ou em execução para poder retornar os valores), entre outros que podem
ser encontrados na documentação.

logs:* - O Beanstalk vai utilizar os vários logs gerados para poder decidir como 
ele deve agir, criando e destruindo máquinas, mostrando loadbalancers ou mudando 
rotas.

ssm:* - O SSM ou Systems Manager é uma ferramenta para aplicarmos correções nas 
máquinas criadas e automatizar tarefas em geral. Como não temos acesso direto às 
máquinas criadas pelo beanstalk, não podemos entrar nelas para aplicar 
atualizações, por exemplo, então o SSM cuida disso.

ec2messages:* - Por ser uma subcategoria dentro dos serviços de autorização, 
temos sua documentação em um local diferente, mas garante o envio de 6 tipos de 
mensagens entre máquinas, sendo eles: confirmação, apagar, falha, obter o 
endpoint, obter mensagens e enviar respostas.

ecr:GetAuthorizationToken - Obtém um token de autorização. Esse token funciona 
como credenciais de autorização do IAM e pode ser utilizado para acessar os 
recursos do Amazon ECR.

ecr:BatchCheckLayerAvailability - Verifica a existência de uma ou mais layers de 
imagens no repositório. Essa permissão é usada apenas por partes dentro da AWS 
e normalmente não é usada por programas externos. Contudo, como o beanstalk é 
uma parte interna da AWS é necessário que ele tenha acesso a essa permissão.

ecr:GetDownloadUrlForLayer - Retorna um link do S3 (onde a Amazon guarda os 
arquivos) que direciona para os layers da imagem. Apenas os layers da imagem 
desejada podem ser acessados.

ecr:GetRepositoryPolicy - Retorna as permisões do repositório desejado, no caso 
da nossa aplicação, se o repositório for privado e não tivermos permisão para 
acessar, teremos um erro que faz sentido.

ecr:DescribeRepositories - Retorna informações do repositório, como data da criação, 
tipo de criptografia, e mais algumas configurações.

ecr:ListImages - Retorna uma lista com todas as imagens dentro do repositório, 
podendo usar filtros para achar uma imagem escolhida.

ecr:DescribeImages - Retorna metadados das imagens no repositório, como data da 
criação da imagem, tamanho da imagem, o ID de registro, entre outras.

ecr:BatchGetImage - Obtém informações detalhadas de uma imagem em específico e 
em seguida retorna o manifesto da imagem com suas configurações.

s3:* - O S3 é onde vamos guardar os dados para a nossa aplicação, sendo assim o 
benastalk tem que ter acesso para ler os dados que guardarmos, e poder ler, 
editar e excluir os dados temporários, nos buckets que ele tem que criar, editar 
e destruir. Logo, ele precisa de todas as permissões possíveis.

com tudo isso criado, podemos criar um perfil de instancia para podermos associar
com a role e as politicas criadas, com esse bloco de codigo:

resource "aws_iam_instance_profile" "beanstalk_ec2_profile" {
  name = "beanstalk-ec2-profile"
  role = aws_iam_role.beanstalk_ec2.name
}

onde estamos criando um recurso aws_iam_instance_profile com o do recurso de 
nome beanstalk_ec2_profile e nome de perfil beanstalk-ec2-profile e atribuindo
a role com o role = aws_iam_role.beanstalk_ec2.name.

